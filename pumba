#!/bin/sh

set -e

# ==============================================================================
# Variables
# ==============================================================================

GIT_BRANCH="${GIT_BRANCH:-master}"
PIP_REQUIREMENTS_FILE="${PIP_REQUIREMENTS_FILE:-requirements.txt}"
PYTHON_MAIN_MODULE="${PYTHON_MAIN_MODULE}"
PYTHON_MAIN="${PYTHON_MAIN}"
PYTHON_VIRTUALENV=".virtualenv"
REPOSITORY_PATH="/usr/src/app"

# ==============================================================================
# Utilities
# ==============================================================================

_assert_is_set() {
    if [ -z "$1" ]; then
        echo "VALUE FOR ENVIRONMENT VARIABLE \"$2\" MISSING" >&2
        exit 1
    fi
}

_display_step() {
    echo "
================================================================================
$(date --rfc-3339 seconds)
$1
================================================================================
"
}

# ==============================================================================
# Script
# ==============================================================================

if [ -n "$PYTHON_MAIN" ]; then
    COMMAND="python3 $PYTHON_MAIN"
elif [ -n "$PYTHON_MAIN_MODULE" ]; then
    COMMAND="python3 -m $PYTHON_MAIN_MODULE"
else
    COMMAND=${COMMAND}
fi

_assert_is_set "$COMMAND" COMMAND
_assert_is_set "$GIT_BRANCH" GIT_BRANCH
_assert_is_set "$GIT_URL" GIT_URL
_assert_is_set "$PIP_REQUIREMENTS_FILE" PIP_REQUIREMENTS_FILE
_assert_is_set "$REPOSITORY_PATH" REPOSITORY_PATH

_display_step "Cloning git repository $GIT_URL"

mkdir -p "$REPOSITORY_PATH"
cd "$REPOSITORY_PATH"
if [ -d ".git" ]; then
    echo "Git repository already present, skipping"
else
    git clone "$GIT_URL" ./
fi
echo "Updating submodules"
git submodule update --init --recursive
if [ "$GIT_BRANCH" != "$(git rev-parse --abbrev-ref HEAD)" ]; then
    echo "Switching to branch $GIT_BRANCH"
    git checkout -b "$GIT_BRANCH" "origin/$GIT_BRANCH"
fi
echo "Pulling changes"
git pull

_display_step "Setting up virtualenv"

if [ -d "$PYTHON_VIRTUALENV" ]; then
    echo "Virtual env found at $PYTHON_VIRTUALENV, skipping"
else
    virtualenv "$PYTHON_VIRTUALENV" -p python3
fi
echo "Activating virtualenv"
# shellcheck disable=SC1090
. "$PYTHON_VIRTUALENV/bin/activate"

_display_step "Installing dependencies"

pip install -U -r "$PIP_REQUIREMENTS_FILE"

_display_step "Running \"$COMMAND\""

eval "$COMMAND"

_display_step "Exiting"
